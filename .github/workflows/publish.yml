name: Publish Python Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # This is required for creating releases
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine pytest
    
    - name: Get version from pyproject.toml
      id: get_version
      run: |
        VERSION=$(grep -oP 'version = "\K[0-9]+\.[0-9]+\.[0-9]+' pyproject.toml)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Current version in repo: $VERSION"
    
    - name: Check if version is valid
      run: |
        if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version $VERSION does not match semantic versioning format (x.y.z)"
          exit 1
        fi
    
    - name: Check if version exists on PyPI
      id: pypi_check
      run: |
        # Install the package that helps with PyPI queries
        pip install packaging requests
        
        # Use Python to get the latest version from PyPI more reliably
        PYPI_VERSION=$(python - <<EOF
        import requests
        import json
        try:
            response = requests.get('https://pypi.org/pypi/elections-canada-mcp-server/json')
            if response.status_code == 200:
                data = response.json()
                print(data['info']['version'])
            else:
                print('0.0.0')  # Package not found or other error
        except Exception as e:
            print('0.0.0')  # Error occurred
        EOF
        )
        
        # If empty, set to 0.0.0
        if [ -z "$PYPI_VERSION" ]; then
          PYPI_VERSION="0.0.0"
        fi
        
        echo "PYPI_VERSION=$PYPI_VERSION" >> $GITHUB_ENV
        echo "Latest version on PyPI: $PYPI_VERSION"
    
    - name: Check if version has increased
      id: version_check
      run: |
        python -c "
        from packaging import version
        pypi_version = version.parse('${{ env.PYPI_VERSION }}')
        new_version = version.parse('${{ env.VERSION }}')
        if new_version <= pypi_version:
          print(f'::set-output name=should_publish::false')
          print(f'No need to publish: Version {new_version} is not greater than PyPI version {pypi_version}')
        else:
          print(f'::set-output name=should_publish::true')
          print(f'Version check passed: {pypi_version} -> {new_version}')
        "
        # For GitHub Actions newer format
        echo "should_publish=$(python -c "
        from packaging import version
        pypi_version = version.parse('${{ env.PYPI_VERSION }}')
        new_version = version.parse('${{ env.VERSION }}')
        print('true' if new_version > pypi_version else 'false')
        ")" >> $GITHUB_OUTPUT
      
    # No need to update __init__.py as it now reads version from pyproject.toml dynamically
    
    # Tests disabled as requested
      
    - name: Message when not publishing
      if: steps.version_check.outputs.should_publish == 'false'
      run: |
        echo "No new version to publish. Current version ${{ env.VERSION }} is not greater than PyPI version ${{ env.PYPI_VERSION }}."
        echo "Skipping publish steps."
    
    - name: Build package
      if: steps.version_check.outputs.should_publish == 'true'
      run: python -m build
    
    - name: Check package
      if: steps.version_check.outputs.should_publish == 'true'
      run: twine check dist/*
    
    - name: Publish package
      if: steps.version_check.outputs.should_publish == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
    
    - name: Create GitHub Release
      if: steps.version_check.outputs.should_publish == 'true'
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        body: |
          # Elections Canada MCP Server v${{ env.VERSION }}
          
          New release of the Elections Canada MCP Server.
        artifacts: "dist/*"
        artifactErrorsFailBuild: true
        skipIfReleaseExists: true
